<?xml version="1.0" encoding="utf-8"?>
<tree:TreeItemRendererBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark"
						   xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" autoDrawBackground="false"
						   doubleClick="treeitemrendererbase1_doubleClickHandler(event)" 
						   doubleClickEnabled="true"
						   styleName="{getStyleNameByType(data)}"
						   height="24" xmlns:tree="awaybuilder.view.components.controls.tree.*" xmlns:components="awaybuilder.view.components.*" xmlns:primitives="awaybuilder.view.components.controls.primitives.*">
	
	<tree:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
	</tree:states>
	
	<fx:Script>
		<![CDATA[
			import awaybuilder.model.vo.scene.AnimationNodeVO;
			import awaybuilder.model.vo.scene.AnimationSetVO;
			import awaybuilder.model.vo.scene.AnimatorVO;
			import awaybuilder.model.vo.scene.AssetVO;
			import awaybuilder.model.vo.scene.CameraVO;
			import awaybuilder.model.vo.scene.ContainerVO;
			import awaybuilder.model.vo.scene.EffectVO;
			import awaybuilder.model.vo.scene.GeometryVO;
			import awaybuilder.model.vo.scene.LightPickerVO;
			import awaybuilder.model.vo.scene.LightVO;
			import awaybuilder.model.vo.scene.MaterialVO;
			import awaybuilder.model.vo.scene.MeshVO;
			import awaybuilder.model.vo.scene.ShadingMethodVO;
			import awaybuilder.model.vo.scene.ShadowMethodVO;
			import awaybuilder.model.vo.scene.SkeletonVO;
			import awaybuilder.model.vo.scene.SkyBoxVO;
			import awaybuilder.model.vo.scene.TextureVO;
			import awaybuilder.model.vo.scene.interfaces.IShared;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.events.DragEvent;
			import mx.events.PropertyChangeEvent;
			
			[Bindable]
			private var _length:int = 0;
			
			[Bindable]
			private var _hasParent:Boolean = false;
			
			override protected function updateChildren():void
			{
				super.updateChildren();
				_length = 0;
				if( data && tree && tree.dataDescriptor )
				{
					if( children && children.length )
					{
						var lastChildren:Object = ArrayCollection(children).getItemAt( children.length-1 );
						var index:uint = tree.dataProvider.getItemIndex( lastChildren );
						_length = index-itemIndex;
					}
					
					var parent:Object = TreeDataProvider(tree.dataProvider).getItemParent( data );
					_hasParent = parent?true:false;
				}
			}
			
			protected function disclosureButton_clickHandler(event:MouseEvent):void
			{
				if( isOpen )
				{
					tree.expandItem( data, false );
				}
				else
				{
					tree.expandBranch( data );
				}
			}
			
			protected function treeitemrendererbase1_doubleClickHandler(event:MouseEvent):void
			{
				toggle();
			}
			
			protected function disclosureButton_dragEnterHandler(event:DragEvent):void
			{
				if( !isOpen )
				{
					toggle();
				}
			}
			
			private static function getStyleNameByType( asset:Object ):String
			{
				switch( true )
				{
					case( asset is MeshVO ):
						return MESH;
						
					case( asset is SkyBoxVO ):
						return SKY_BOX;
						
					case( asset is ContainerVO ):
						return CONTAINER;
						
					case( asset is MaterialVO ):
						return MATERIAL;
						
					case( asset is TextureVO ):
						return TEXTURE;
						
					case( asset is LightVO ):
						return LIGHT;
						
					case( asset is AnimatorVO ):
						return ANIMATOR;
						
					case( asset is AnimationNodeVO ):
						return ANIMATION_NODE;
						
					case( asset is AnimationSetVO ):
						return ANIMATION_SET;
						
					case( asset is SkeletonVO ):
						return SKELETON;
						
					case( asset is GeometryVO ):
						return GEOMETRY;
						
					case( asset is ShadowMethodVO ):
						return SHADOW;
						
					case( asset is EffectVO ):
						return EFFECT;
						
					case( asset is CameraVO ):
						return CAMERA;
						
					case( asset is LightPickerVO ):
						return LIGHTPICKER;
				}
				return "default";
			}
			
			public static const LIGHT:String = "light";
			public static const LIGHTPICKER:String = "lightPicker";
			public static const MESH:String = "mesh";
			public static const SKY_BOX:String = "skyBox";
			public static const MATERIAL:String = "material";
			public static const GEOMETRY:String = "geometry";
			public static const SKELETON:String = "skeleton";
			public static const SKELETON_POSE:String = "skeletonPose";
			public static const CONTAINER:String = "container";
			public static const BEAR:String = "bear";
			public static const ANIMATION_NODE:String = "animationNode";
			public static const ANIMATION_SET:String = "animationSet";
			public static const ANIMATOR:String = "animator";
			public static const TEXTURE:String = "texture";
			public static const AMBIENT:String = "ambient";
			public static const NORMAL:String = "normal";
			public static const DIFFUSE:String = "diffuse";
			public static const SHADOW:String = "shadow";
			public static const EFFECT:String = "effect";
			public static const SPECULAR:String = "specular";
			public static const SHADING:String = "shading";
			public static const CAMERA:String = "camera";
			public static const LENS:String = "lens";
		]]>
	</fx:Script>
	
	<s:Rect height="22" width="{this.width}" y="1" includeIn="hovered,selected" alpha.hovered="0.3" includeInLayout="false">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x105F9F" alpha="0.4" ratio="0.2"/>
				<s:GradientEntry color="0x105F9F" alpha="0.5" ratio="0.9"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<primitives:DashedLine height="{24*_length}" x="{indentation+12+14}" y="{12}" visible="{isOpen}">
		<primitives:stroke>
			<s:SolidColorStroke color="0x606066" weight="1" pixelHinting="true"/>
		</primitives:stroke>
	</primitives:DashedLine>
	<primitives:DashedLine width="12" x="{indentation+10}" y="12" visible="{_hasParent}">
		<primitives:stroke>
			<s:SolidColorStroke color="0x606066" weight="1" pixelHinting="true"/>
		</primitives:stroke>
	</primitives:DashedLine>
	
	<s:HGroup paddingLeft="{indentation + 2}" verticalAlign="middle" paddingBottom="4" paddingTop="4" gap="0" height="24">
		<s:ToggleButton id="disclosureButton" visible="{disclosureIconVisible}" click="disclosureButton_clickHandler(event)" dragEnter="disclosureButton_dragEnterHandler(event)"
						selected="{isOpen}" skinClass="awaybuilder.view.skins.tree.TreeDisclosureButtonSkin"/>
		
		<s:BitmapImage source="{getStyle('icon')}"/>
		
		<s:Label id="labelDisplay" text="{data.name}" color.selected="0xFFFFFF" color.hovered="0xEEEEEE" paddingTop="2" paddingLeft="3" />
		
	</s:HGroup>
	
	<s:Image source="@Embed('assets/images/linkArrow.png')" visible="{data is IShared}" includeInLayout="{data is IShared}" alpha="0.75" right="4" verticalCenter="0" 
			 toolTip="Usage of Shared Resource"/>
	
	<s:Rect x="2" y="2" width="{this.width-4}" height="{this.height-4}" includeInLayout="false" visible="{showDropIndicator}">
		<s:stroke>
			<s:SolidColorStroke color="0xCCCCFF" alpha="0.5" weight="2"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="0xFFFFFF" alpha="0.1"/>
		</s:fill>
	</s:Rect>
	
</tree:TreeItemRendererBase>
